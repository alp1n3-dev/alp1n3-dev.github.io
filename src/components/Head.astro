---
import "../styles/global.css";

import "@fontsource/geist-sans/100.css";
import "@fontsource/geist-sans/200.css";
import "@fontsource/geist-sans/300.css";
import "@fontsource/geist-sans/400.css";
import "@fontsource/geist-sans/500.css";
import "@fontsource/geist-sans/600.css";
import "@fontsource/geist-sans/700.css";
import "@fontsource/geist-sans/800.css";
import "@fontsource/geist-sans/900.css";
import "@fontsource/geist-mono/100.css";
import "@fontsource/geist-mono/200.css";
import "@fontsource/geist-mono/300.css";
import "@fontsource/geist-mono/400.css";
import "@fontsource/geist-mono/500.css";
import "@fontsource/geist-mono/600.css";
import "@fontsource/geist-mono/700.css";
import "@fontsource/geist-mono/800.css";
import "@fontsource/geist-mono/900.css";

import { CONTACT, GLOBAL } from "../consts";
import { resolvePath } from "@lib/utils";

interface Props {
  title: string;
  description?: string;
  ogImage?: string;
}

const { title, description, ogImage = "/og-image.png" } = Astro.props;

const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

const twitterHandle = CONTACT.find(
  (contact) => contact.type === "X",
)?.displayAs;

const ogImageFullUrl = new URL(resolvePath(ogImage), Astro.site);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href={resolvePath("/favicon.svg")} />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalUrl} />

<!-- RSS -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={title}
  href={resolvePath("/feed.xml")}
/>

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description ?? GLOBAL.description} />
<meta name="author" content={GLOBAL.author} />

<!-- Open Graph / Facebook / LinkedIn -->
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:title" content={title} />
{description && <meta property="og:description" content={description} />}
<meta property="og:image" content={ogImageFullUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalUrl} />
<meta property="twitter:title" content={title} />
<meta property="twitter:image" content={ogImageFullUrl} />
{description && <meta property="twitter:description" content={description} />}
{twitterHandle && <meta property="twitter:site" content={twitterHandle} />}

<!-- PageFind -->
<link href={resolvePath("/pagefind/pagefind-ui.css")} rel="stylesheet" />
<script is:inline src={resolvePath("/pagefind/pagefind-ui.js")}></script>

<!-- Logo -->
{
  GLOBAL.logo && (
    <div
      id="logo-srcs"
      style="display: none;"
      data-dark-src={resolvePath(GLOBAL.logo.darkThemeSrc, Astro.url.pathname)}
      data-light-src={resolvePath(
        GLOBAL.logo.lightThemeSrc,
        Astro.url.pathname,
      )}
    />
  )
}

<!-- Umami Cloud Site Analytics -->
<!--<script
  defer
  src="https://cloud.umami.is/script.js"
  data-website-id="6169bff0-8c04-4811-b59d-1ea7a5c9b853"></script>-->

<!-- Had to manually include it... No way to edit CSP w/ Astro? -->
<script async defer data-website-id="6169bff0-8c04-4811-b59d-1ea7a5c9b853">
  !(function () {
    "use strict";
    ((t) => {
      const {
          screen: { width: e, height: a },
          navigator: { language: r },
          location: n,
          document: i,
          history: s,
        } = t,
        { hostname: c, href: o, origin: u } = n,
        { currentScript: l, referrer: d } = i,
        h = o.startsWith("data:") ? void 0 : t.localStorage;
      if (!l) return;
      const m = "data-",
        f = "true",
        p = l.getAttribute.bind(l),
        g = p(m + "website-id"),
        y = p(m + "host-url"),
        b = p(m + "tag"),
        v = "false" !== p(m + "auto-track"),
        w = p(m + "exclude-search") === f,
        S = p(m + "exclude-hash") === f,
        N = p(m + "domains") || "",
        T = N.split(",").map((t) => t.trim()),
        A = `${(y || "https://api-gateway.umami.dev" || l.src.split("/").slice(0, -1).join("/")).replace(/\/$/, "")}/api/send`,
        j = `${e}x${a}`,
        x = /data-umami-event-([\w-_]+)/,
        O = m + "umami-event",
        k = 300,
        E = (t) => {
          try {
            const { pathname: e, search: a, hash: r } = new URL(t, n.href);
            return e + (w ? "" : a) + (S ? "" : r);
          } catch (e) {
            return t;
          }
        },
        L = () => ({
          website: g,
          hostname: c,
          screen: j,
          language: r,
          title: J,
          url: C,
          referrer: I,
          tag: b || void 0,
        }),
        $ = (t, e, a) => {
          a && ((I = C), (C = E(a.toString())), C !== I && setTimeout(D, k));
        },
        K = () =>
          M ||
          !g ||
          (h && h.getItem("umami.disabled")) ||
          (N && !T.includes(c)),
        U = async (t, e = "event") => {
          if (K()) return;
          const a = { "Content-Type": "application/json" };
          void 0 !== _ && (a["x-umami-cache"] = _);
          try {
            const r = await fetch(A, {
                method: "POST",
                body: JSON.stringify({ type: e, payload: t }),
                headers: a,
              }),
              n = await r.json();
            n && ((M = !!n.disabled), (_ = n.cache));
          } catch (t) {}
        },
        B = () => {
          q ||
            (D(),
            (() => {
              const t = (t, e, a) => {
                const r = t[e];
                return (...e) => (a.apply(null, e), r.apply(t, e));
              };
              (s.pushState = t(s, "pushState", $)),
                (s.replaceState = t(s, "replaceState", $));
            })(),
            (() => {
              const t = new MutationObserver(([t]) => {
                  J = t && t.target ? t.target.text : void 0;
                }),
                e = i.querySelector("head > title");
              e &&
                t.observe(e, { subtree: !0, characterData: !0, childList: !0 });
            })(),
            i.addEventListener(
              "click",
              async (t) => {
                const e = (t) => ["BUTTON", "A"].includes(t),
                  a = async (t) => {
                    const e = t.getAttribute.bind(t),
                      a = e(O);
                    if (a) {
                      const r = {};
                      return (
                        t.getAttributeNames().forEach((t) => {
                          const a = t.match(x);
                          a && (r[a[1]] = e(t));
                        }),
                        D(a, r)
                      );
                    }
                  },
                  r = t.target,
                  i = e(r.tagName)
                    ? r
                    : ((t, a) => {
                        let r = t;
                        for (let t = 0; t < a; t++) {
                          if (e(r.tagName)) return r;
                          if (((r = r.parentElement), !r)) return null;
                        }
                      })(r, 10);
                if (!i) return a(r);
                {
                  const { href: e, target: r } = i,
                    s = i.getAttribute(O);
                  if (s)
                    if ("A" === i.tagName) {
                      const c =
                        "_blank" === r ||
                        t.ctrlKey ||
                        t.shiftKey ||
                        t.metaKey ||
                        (t.button && 1 === t.button);
                      if (s && e)
                        return (
                          c || t.preventDefault(),
                          a(i).then(() => {
                            c || (n.href = e);
                          })
                        );
                    } else if ("BUTTON" === i.tagName) return a(i);
                }
              },
              !0,
            ),
            (q = !0));
        },
        D = (t, e) =>
          U(
            "string" == typeof t
              ? { ...L(), name: t, data: "object" == typeof e ? e : void 0 }
              : "object" == typeof t
                ? t
                : "function" == typeof t
                  ? t(L())
                  : L(),
          ),
        W = (t) => U({ ...L(), data: t }, "identify");
      t.umami || (t.umami = { track: D, identify: W });
      let _,
        q,
        C = E(o),
        I = d.startsWith(u) ? "" : d,
        J = i.title,
        M = !1;
      v &&
        !K() &&
        ("complete" === i.readyState
          ? B()
          : i.addEventListener("readystatechange", B, !0));
    })(window);
  })();
</script>

<script is:inline>
  function init() {
    preloadTheme();
    onScroll();
    animate();
    updateThemeButtons();
    addCopyCodeButtons();
    setGiscusTheme();

    const backToTop = document.getElementById("back-to-top");
    backToTop?.addEventListener("click", (event) => scrollToTop(event));

    const backToPrev = document.getElementById("back-to-prev");
    backToPrev?.addEventListener("click", () => window.history.back());

    const lightThemeButton = document.getElementById("light-theme-button");
    lightThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "light");
      toggleTheme(false);
      updateThemeButtons();
    });

    const darkThemeButton = document.getElementById("dark-theme-button");
    darkThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "dark");
      toggleTheme(true);
      updateThemeButtons();
    });

    const systemThemeButton = document.getElementById("system-theme-button");
    systemThemeButton?.addEventListener("click", () => {
      localStorage.setItem("theme", "system");
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
      updateThemeButtons();
    });

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (event) => {
        if (localStorage.theme === "system") {
          toggleTheme(event.matches);
        }
      });

    document.addEventListener("scroll", onScroll);
  }

  function updateThemeButtons() {
    const theme = localStorage.getItem("theme");
    const lightThemeButton = document.getElementById("light-theme-button");
    const darkThemeButton = document.getElementById("dark-theme-button");
    const systemThemeButton = document.getElementById("system-theme-button");

    function removeActiveButtonTheme(button) {
      button?.classList.remove("bg-black/5");
      button?.classList.remove("dark:bg-white/5");
    }

    function addActiveButtonTheme(button) {
      button?.classList.add("bg-black/5");
      button?.classList.add("dark:bg-white/5");
    }

    removeActiveButtonTheme(lightThemeButton);
    removeActiveButtonTheme(darkThemeButton);
    removeActiveButtonTheme(systemThemeButton);

    if (theme === "light") {
      addActiveButtonTheme(lightThemeButton);
    } else if (theme === "dark") {
      addActiveButtonTheme(darkThemeButton);
    } else {
      addActiveButtonTheme(systemThemeButton);
    }
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 100);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function scrollToTop(event) {
    event.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
  }

  function getLogoSrc(darkTheme) {
    const logoSrcs = document.getElementById("logo-srcs");
    if (!logoSrcs) {
      return undefined;
    }

    if (darkTheme) {
      return (
        logoSrcs.getAttribute("data-dark-src") ??
        logoSrcs.getAttribute("data-light-src")
      );
    }

    if (!darkTheme) {
      return (
        logoSrcs.getAttribute("data-light-src") ??
        logoSrcs.getAttribute("data-dark-src")
      );
    }
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
      ),
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    const logoSrc = getLogoSrc(dark);
    const logo = document.getElementById("logo");

    if (logoSrc && logo) {
      logo.src = logoSrc;
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);

    setGiscusTheme();
  }

  function preloadTheme() {
    const userTheme = localStorage.theme;

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function addCopyCodeButtons() {
    let copyButtonLabel = "📋";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    async function copyCode(codeBlock, copyButton) {
      const codeText = codeBlock.innerText;
      const buttonText = copyButton.innerText;
      const textToCopy = codeText.replace(buttonText, "");

      await navigator.clipboard.writeText(textToCopy);
      copyButton.innerText = "✅";

      setTimeout(() => {
        copyButton.innerText = copyButtonLabel;
      }, 2000);
    }

    for (let codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      const copyButton = document.createElement("button");
      copyButton.innerText = copyButtonLabel;
      copyButton.classList = "copy-code";

      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton?.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  }

  const setGiscusTheme = () => {
    const giscus = document.querySelector(".giscus-frame");

    const isDark = document.documentElement.classList.contains("dark");

    if (giscus) {
      const url = new URL(giscus.src);
      url.searchParams.set("theme", isDark ? "dark" : "light");
      giscus.src = url.toString();
    }
  };

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
</script>
-->
